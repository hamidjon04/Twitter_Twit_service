// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: user.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUsers(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRes, error)
	DeleteUsers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Massage, error)
	GetByIdUsers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	AddFollower(ctx context.Context, in *FollowerReq, opts ...grpc.CallOption) (*Massage, error)
	GetFollowers(ctx context.Context, in *GetFollowersReq, opts ...grpc.CallOption) (*GetaFollowersRes, error)
	DeleteFollower(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Massage, error)
	GetByIdFollower(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Followers, error)
	AddFollowing(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*Massage, error)
	GetFollowing(ctx context.Context, in *GetFollowingReq, opts ...grpc.CallOption) (*GetaFollowingRes, error)
	DeleteFollowing(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Massage, error)
	GetByIdFollowing(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Following, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRes, error) {
	out := new(GetUserRes)
	err := c.cc.Invoke(ctx, "/users.UserService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUsers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Massage, error) {
	out := new(Massage)
	err := c.cc.Invoke(ctx, "/users.UserService/DeleteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetByIdUsers(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/users.UserService/GetByIdUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddFollower(ctx context.Context, in *FollowerReq, opts ...grpc.CallOption) (*Massage, error) {
	out := new(Massage)
	err := c.cc.Invoke(ctx, "/users.UserService/AddFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFollowers(ctx context.Context, in *GetFollowersReq, opts ...grpc.CallOption) (*GetaFollowersRes, error) {
	out := new(GetaFollowersRes)
	err := c.cc.Invoke(ctx, "/users.UserService/GetFollowers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteFollower(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Massage, error) {
	out := new(Massage)
	err := c.cc.Invoke(ctx, "/users.UserService/DeleteFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetByIdFollower(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Followers, error) {
	out := new(Followers)
	err := c.cc.Invoke(ctx, "/users.UserService/GetByIdFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddFollowing(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*Massage, error) {
	out := new(Massage)
	err := c.cc.Invoke(ctx, "/users.UserService/AddFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFollowing(ctx context.Context, in *GetFollowingReq, opts ...grpc.CallOption) (*GetaFollowingRes, error) {
	out := new(GetaFollowingRes)
	err := c.cc.Invoke(ctx, "/users.UserService/GetFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteFollowing(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Massage, error) {
	out := new(Massage)
	err := c.cc.Invoke(ctx, "/users.UserService/DeleteFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetByIdFollowing(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Following, error) {
	out := new(Following)
	err := c.cc.Invoke(ctx, "/users.UserService/GetByIdFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUsers(context.Context, *GetUserReq) (*GetUserRes, error)
	DeleteUsers(context.Context, *Id) (*Massage, error)
	GetByIdUsers(context.Context, *Id) (*User, error)
	AddFollower(context.Context, *FollowerReq) (*Massage, error)
	GetFollowers(context.Context, *GetFollowersReq) (*GetaFollowersRes, error)
	DeleteFollower(context.Context, *Id) (*Massage, error)
	GetByIdFollower(context.Context, *Id) (*Followers, error)
	AddFollowing(context.Context, *FollowingReq) (*Massage, error)
	GetFollowing(context.Context, *GetFollowingReq) (*GetaFollowingRes, error)
	DeleteFollowing(context.Context, *Id) (*Massage, error)
	GetByIdFollowing(context.Context, *Id) (*Following, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUsers(context.Context, *GetUserReq) (*GetUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServiceServer) DeleteUsers(context.Context, *Id) (*Massage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsers not implemented")
}
func (UnimplementedUserServiceServer) GetByIdUsers(context.Context, *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdUsers not implemented")
}
func (UnimplementedUserServiceServer) AddFollower(context.Context, *FollowerReq) (*Massage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollower not implemented")
}
func (UnimplementedUserServiceServer) GetFollowers(context.Context, *GetFollowersReq) (*GetaFollowersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedUserServiceServer) DeleteFollower(context.Context, *Id) (*Massage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollower not implemented")
}
func (UnimplementedUserServiceServer) GetByIdFollower(context.Context, *Id) (*Followers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdFollower not implemented")
}
func (UnimplementedUserServiceServer) AddFollowing(context.Context, *FollowingReq) (*Massage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollowing not implemented")
}
func (UnimplementedUserServiceServer) GetFollowing(context.Context, *GetFollowingReq) (*GetaFollowingRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowing not implemented")
}
func (UnimplementedUserServiceServer) DeleteFollowing(context.Context, *Id) (*Massage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollowing not implemented")
}
func (UnimplementedUserServiceServer) GetByIdFollowing(context.Context, *Id) (*Following, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdFollowing not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/DeleteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUsers(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetByIdUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetByIdUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetByIdUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetByIdUsers(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/AddFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddFollower(ctx, req.(*FollowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetFollowers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFollowers(ctx, req.(*GetFollowersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/DeleteFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteFollower(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetByIdFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetByIdFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetByIdFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetByIdFollower(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/AddFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddFollowing(ctx, req.(*FollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetFollowing(ctx, req.(*GetFollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/DeleteFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteFollowing(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetByIdFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetByIdFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetByIdFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetByIdFollowing(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _UserService_DeleteUsers_Handler,
		},
		{
			MethodName: "GetByIdUsers",
			Handler:    _UserService_GetByIdUsers_Handler,
		},
		{
			MethodName: "AddFollower",
			Handler:    _UserService_AddFollower_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _UserService_GetFollowers_Handler,
		},
		{
			MethodName: "DeleteFollower",
			Handler:    _UserService_DeleteFollower_Handler,
		},
		{
			MethodName: "GetByIdFollower",
			Handler:    _UserService_GetByIdFollower_Handler,
		},
		{
			MethodName: "AddFollowing",
			Handler:    _UserService_AddFollowing_Handler,
		},
		{
			MethodName: "GetFollowing",
			Handler:    _UserService_GetFollowing_Handler,
		},
		{
			MethodName: "DeleteFollowing",
			Handler:    _UserService_DeleteFollowing_Handler,
		},
		{
			MethodName: "GetByIdFollowing",
			Handler:    _UserService_GetByIdFollowing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
