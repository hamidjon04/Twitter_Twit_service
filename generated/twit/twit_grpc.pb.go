// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: twit.proto

package twit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwitServiceClient is the client API for TwitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitServiceClient interface {
	CreateTwit(ctx context.Context, in *CreateTwitReq, opts ...grpc.CallOption) (*CreateTwitResp, error)
	UpadateTwit(ctx context.Context, in *UpadateReq, opts ...grpc.CallOption) (*UpdateTwitResp, error)
	DeleteTwit(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Message, error)
	GetTwits(ctx context.Context, in *GetTwitsReq, opts ...grpc.CallOption) (*GetTwitsResp, error)
	AddLike(ctx context.Context, in *AddLikeReq, opts ...grpc.CallOption) (*AddLikeResp, error)
	RemoveLike(ctx context.Context, in *DeleleLikeReq, opts ...grpc.CallOption) (*Message, error)
	AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error)
	RemoveComment(ctx context.Context, in *RemoveVommentReq, opts ...grpc.CallOption) (*Message, error)
	GetComment(ctx context.Context, in *GetCommentReq, opts ...grpc.CallOption) (*GetCommentResp, error)
	GetCommentById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Comment, error)
	UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentResp, error)
}

type twitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitServiceClient(cc grpc.ClientConnInterface) TwitServiceClient {
	return &twitServiceClient{cc}
}

func (c *twitServiceClient) CreateTwit(ctx context.Context, in *CreateTwitReq, opts ...grpc.CallOption) (*CreateTwitResp, error) {
	out := new(CreateTwitResp)
	err := c.cc.Invoke(ctx, "/twit.TwitService/CreateTwit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) UpadateTwit(ctx context.Context, in *UpadateReq, opts ...grpc.CallOption) (*UpdateTwitResp, error) {
	out := new(UpdateTwitResp)
	err := c.cc.Invoke(ctx, "/twit.TwitService/UpadateTwit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) DeleteTwit(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/twit.TwitService/DeleteTwit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) GetTwits(ctx context.Context, in *GetTwitsReq, opts ...grpc.CallOption) (*GetTwitsResp, error) {
	out := new(GetTwitsResp)
	err := c.cc.Invoke(ctx, "/twit.TwitService/GetTwits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) AddLike(ctx context.Context, in *AddLikeReq, opts ...grpc.CallOption) (*AddLikeResp, error) {
	out := new(AddLikeResp)
	err := c.cc.Invoke(ctx, "/twit.TwitService/AddLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) RemoveLike(ctx context.Context, in *DeleleLikeReq, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/twit.TwitService/RemoveLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error) {
	out := new(AddCommentResp)
	err := c.cc.Invoke(ctx, "/twit.TwitService/AddComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) RemoveComment(ctx context.Context, in *RemoveVommentReq, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/twit.TwitService/RemoveComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) GetComment(ctx context.Context, in *GetCommentReq, opts ...grpc.CallOption) (*GetCommentResp, error) {
	out := new(GetCommentResp)
	err := c.cc.Invoke(ctx, "/twit.TwitService/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) GetCommentById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/twit.TwitService/GetCommentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentReq, opts ...grpc.CallOption) (*UpdateCommentResp, error) {
	out := new(UpdateCommentResp)
	err := c.cc.Invoke(ctx, "/twit.TwitService/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitServiceServer is the server API for TwitService service.
// All implementations must embed UnimplementedTwitServiceServer
// for forward compatibility
type TwitServiceServer interface {
	CreateTwit(context.Context, *CreateTwitReq) (*CreateTwitResp, error)
	UpadateTwit(context.Context, *UpadateReq) (*UpdateTwitResp, error)
	DeleteTwit(context.Context, *Id) (*Message, error)
	GetTwits(context.Context, *GetTwitsReq) (*GetTwitsResp, error)
	AddLike(context.Context, *AddLikeReq) (*AddLikeResp, error)
	RemoveLike(context.Context, *DeleleLikeReq) (*Message, error)
	AddComment(context.Context, *AddCommentReq) (*AddCommentResp, error)
	RemoveComment(context.Context, *RemoveVommentReq) (*Message, error)
	GetComment(context.Context, *GetCommentReq) (*GetCommentResp, error)
	GetCommentById(context.Context, *Id) (*Comment, error)
	UpdateComment(context.Context, *UpdateCommentReq) (*UpdateCommentResp, error)
	mustEmbedUnimplementedTwitServiceServer()
}

// UnimplementedTwitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTwitServiceServer struct {
}

func (UnimplementedTwitServiceServer) CreateTwit(context.Context, *CreateTwitReq) (*CreateTwitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTwit not implemented")
}
func (UnimplementedTwitServiceServer) UpadateTwit(context.Context, *UpadateReq) (*UpdateTwitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpadateTwit not implemented")
}
func (UnimplementedTwitServiceServer) DeleteTwit(context.Context, *Id) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTwit not implemented")
}
func (UnimplementedTwitServiceServer) GetTwits(context.Context, *GetTwitsReq) (*GetTwitsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwits not implemented")
}
func (UnimplementedTwitServiceServer) AddLike(context.Context, *AddLikeReq) (*AddLikeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLike not implemented")
}
func (UnimplementedTwitServiceServer) RemoveLike(context.Context, *DeleleLikeReq) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLike not implemented")
}
func (UnimplementedTwitServiceServer) AddComment(context.Context, *AddCommentReq) (*AddCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedTwitServiceServer) RemoveComment(context.Context, *RemoveVommentReq) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveComment not implemented")
}
func (UnimplementedTwitServiceServer) GetComment(context.Context, *GetCommentReq) (*GetCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedTwitServiceServer) GetCommentById(context.Context, *Id) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentById not implemented")
}
func (UnimplementedTwitServiceServer) UpdateComment(context.Context, *UpdateCommentReq) (*UpdateCommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedTwitServiceServer) mustEmbedUnimplementedTwitServiceServer() {}

// UnsafeTwitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitServiceServer will
// result in compilation errors.
type UnsafeTwitServiceServer interface {
	mustEmbedUnimplementedTwitServiceServer()
}

func RegisterTwitServiceServer(s grpc.ServiceRegistrar, srv TwitServiceServer) {
	s.RegisterService(&TwitService_ServiceDesc, srv)
}

func _TwitService_CreateTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTwitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).CreateTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twit.TwitService/CreateTwit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).CreateTwit(ctx, req.(*CreateTwitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_UpadateTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpadateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).UpadateTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twit.TwitService/UpadateTwit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).UpadateTwit(ctx, req.(*UpadateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_DeleteTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).DeleteTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twit.TwitService/DeleteTwit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).DeleteTwit(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_GetTwits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).GetTwits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twit.TwitService/GetTwits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).GetTwits(ctx, req.(*GetTwitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twit.TwitService/AddLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).AddLike(ctx, req.(*AddLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_RemoveLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleleLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).RemoveLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twit.TwitService/RemoveLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).RemoveLike(ctx, req.(*DeleleLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twit.TwitService/AddComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).AddComment(ctx, req.(*AddCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_RemoveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).RemoveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twit.TwitService/RemoveComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).RemoveComment(ctx, req.(*RemoveVommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twit.TwitService/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).GetComment(ctx, req.(*GetCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_GetCommentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).GetCommentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twit.TwitService/GetCommentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).GetCommentById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twit.TwitService/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).UpdateComment(ctx, req.(*UpdateCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TwitService_ServiceDesc is the grpc.ServiceDesc for TwitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "twit.TwitService",
	HandlerType: (*TwitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTwit",
			Handler:    _TwitService_CreateTwit_Handler,
		},
		{
			MethodName: "UpadateTwit",
			Handler:    _TwitService_UpadateTwit_Handler,
		},
		{
			MethodName: "DeleteTwit",
			Handler:    _TwitService_DeleteTwit_Handler,
		},
		{
			MethodName: "GetTwits",
			Handler:    _TwitService_GetTwits_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _TwitService_AddLike_Handler,
		},
		{
			MethodName: "RemoveLike",
			Handler:    _TwitService_RemoveLike_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _TwitService_AddComment_Handler,
		},
		{
			MethodName: "RemoveComment",
			Handler:    _TwitService_RemoveComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _TwitService_GetComment_Handler,
		},
		{
			MethodName: "GetCommentById",
			Handler:    _TwitService_GetCommentById_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _TwitService_UpdateComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twit.proto",
}
